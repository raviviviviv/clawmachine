#include <LiquidCrystal_I2C.h>
LiquidCrystal_I2C lcd(0x27, 20, 4);


#define ena 10
#define in1 8
#define in2 9
#define enb 11
#define in3 12
#define in4 13
#define coinpin 2
#define right A2
#define left A3
#define up A0
#define down A1
volatile bool coinflag = false;
bool lastcoinflag = false;
volatile unsigned long lastCoinTime = 0;  // Store last coin pulse time
const unsigned long debounceDelay = 20;   // Debounce time in ms
bool onoff = 0;



void coin() {
  unsigned long currentTime = millis();
  if (currentTime - lastCoinTime > debounceDelay) {
    lastCoinTime = currentTime;
    coinflag = !coinflag;
     onoff = 1;
    Serial.println(onoff);
    Serial.println("Coin detected!");
  }
}


void setup() {
  // put your setup code here, to run once:
  lcd.init();
  lcd.backlight();
  pinMode(right, INPUT_PULLUP);
  pinMode(left, INPUT_PULLUP);
  pinMode(up, INPUT_PULLUP);
  pinMode(down, INPUT_PULLUP);
  pinMode(ena, OUTPUT);
  
  pinMode(in1, OUTPUT);
  pinMode(in2, OUTPUT);
  pinMode(coinpin, INPUT_PULLUP);
  Serial.begin(9600);
  
}

void loop() {
  // put your main code here, to run repeatedly:

attachInterrupt(digitalPinToInterrupt(coinpin), coin, FALLING);
  if (onoff == 1) {
    switch (getpos()) {  //if onoff is on do the main loop
      case 1:            //up
        moveup();
        //Serial.println("up");
        break;
      case 2:  //down
        movedown();
        //Serial.println("down");

        break;

      case 3:  //right
        moveright();
        //Serial.println("right");

        break;
      case 4:  //left
        //Serial.println("left");

        moveleft();
        break;
      case 5:  //center
        //Serial.println("center");
        idle();
        break;
      default:
        analogWrite(ena, 0);
        break;
    }
  } else {
    animation_2();
  }
}


int getpos() {

  if (digitalRead(up) == 0) {
    return 1;
  } else if (digitalRead(down) == 0) {
    return 2;
  } else if (digitalRead(left) == 0) {
    return 3;
  } else if (digitalRead(right) == 0) {
    return 4;
  } else {
    return 5;
  }
}

void moveright() {
  analogWrite(ena, 255);
  digitalWrite(in1, 0);
  digitalWrite(in2, 1);

  lcd.setCursor(0, 0);
  lcd.print("right  ");
}

void moveleft() {

  analogWrite(ena, 255);
  digitalWrite(in1, 1);
  digitalWrite(in2, 0);
  lcd.setCursor(0, 0);
  lcd.print("left  ");
}

void moveup() {
  //Serial.println("case 1");
  lcd.clear();
  lcd.setCursor(0, 0);
  lcd.print("up  ");
  analogWrite(enb, 255);
  digitalWrite(in3, 0);
  digitalWrite(in4, 1);
}
void movedown() {
  //Serial.println("case2");
  lcd.clear();
  lcd.setCursor(0, 0);
  lcd.print("down  ");
  analogWrite(enb, 255);
  digitalWrite(in3, 0);
  digitalWrite(in4, 1);
}



void animation_1() {
  int anitime = 500;
  lcd.clear();
  lcd.setCursor(0, 0);  //start of row 1
  lcd.print("O");
  delay(anitime);
  lcd.clear();
  lcd.setCursor(1, 0);
  lcd.print("O");
  delay(anitime);
  lcd.clear();
  lcd.setCursor(2, 0);
  lcd.print("O");
  delay(anitime);
  lcd.clear();
  lcd.setCursor(3, 0);
  lcd.print("O");
  delay(anitime);
  lcd.clear();
  lcd.setCursor(4, 0);
  lcd.print("O");
  delay(anitime);
  lcd.clear();
  lcd.setCursor(5, 0);
  lcd.print("O");
  delay(anitime);
  lcd.clear();
  lcd.setCursor(6, 0);
  lcd.print("O");
  delay(anitime);
  lcd.clear();
  lcd.setCursor(7, 0);
  lcd.print("O");
  delay(anitime);
  lcd.clear();
  lcd.setCursor(8, 0);
  lcd.print("O");
  delay(anitime);
  lcd.clear();
  lcd.setCursor(9, 0);
  lcd.print("O");
  delay(anitime);
  lcd.clear();
  lcd.setCursor(10, 0);
  lcd.print("O");
  delay(anitime);
  lcd.clear();
  lcd.setCursor(11, 0);
  lcd.print("O");
  delay(anitime);
  lcd.clear();
  lcd.setCursor(12, 0);
  lcd.print("O");
  delay(anitime);
  lcd.clear();
  lcd.setCursor(13, 0);
  lcd.print("O");
  delay(anitime);
  lcd.clear();
  lcd.setCursor(14, 0);
  lcd.print("O");
  delay(anitime);
  lcd.clear();
  lcd.setCursor(14, 0);
  lcd.print("O");
  delay(anitime);
  lcd.clear();
  lcd.setCursor(15, 0);
  lcd.print("O");
  delay(anitime);
  lcd.clear();
  lcd.setCursor(16, 0);
  lcd.print("O");
  delay(anitime);
  lcd.clear();
  lcd.setCursor(17, 0);
  lcd.print("O");
  delay(anitime);
  lcd.clear();
  lcd.setCursor(18, 0);
  lcd.print("O");
  delay(anitime);
  lcd.clear();
  lcd.setCursor(19, 0);
  lcd.print("O");
  delay(anitime);  //end of row 1


  lcd.clear();  //start of column 4
  lcd.setCursor(19, 1);
  lcd.print("O");
  delay(anitime);
  lcd.clear();
  lcd.setCursor(19, 2);
  lcd.print("O");
  delay(anitime);
  lcd.clear();
  lcd.setCursor(19, 3);
  lcd.print("O");
  delay(anitime);
  lcd.clear();
  lcd.setCursor(19, 4);
  lcd.print("O");
  delay(anitime);  //end of column 4
  lcd.clear();

  lcd.setCursor(19, 3);  //start of row 4
  lcd.print("O");
  delay(anitime);
  lcd.clear();
  lcd.setCursor(18, 3);
  lcd.print("O");
  delay(anitime);
  lcd.clear();
  lcd.setCursor(17, 3);
  lcd.print("O");
  delay(anitime);
  lcd.clear();
  lcd.setCursor(16, 4);
  lcd.print("O");
  delay(anitime);
  lcd.clear();
  lcd.setCursor(15, 4);
  lcd.print("O");
  delay(anitime);
  lcd.clear();
  lcd.setCursor(14, 3);
  lcd.print("O");
  delay(anitime);
  lcd.clear();
  lcd.setCursor(13, 3);
  lcd.print("O");
  delay(anitime);
  lcd.clear();
  lcd.setCursor(12, 3);
  lcd.print("O");
  delay(anitime);
  lcd.clear();
  lcd.setCursor(11, 3);
  lcd.print("O");
  delay(anitime);
  lcd.clear();
  lcd.setCursor(10, 3);
  lcd.print("O");
  delay(anitime);
  lcd.clear();
  lcd.setCursor(9, 3);
  lcd.print("O");
  delay(anitime);
  lcd.clear();
  lcd.setCursor(8, 3);
  lcd.print("O");
  delay(anitime);
  lcd.clear();
  lcd.setCursor(7, 3);
  lcd.print("O");
  delay(anitime);
  lcd.clear();
  lcd.setCursor(6, 3);
  lcd.print("O");
  delay(anitime);
  lcd.clear();
  lcd.setCursor(5, 3);
  lcd.print("O");
  delay(anitime);
  lcd.clear();
  lcd.setCursor(4, 3);
  lcd.print("O");
  delay(anitime);
  lcd.clear();
  lcd.setCursor(3, 3);
  lcd.print("O");
  delay(anitime);
  lcd.clear();
  lcd.setCursor(2, 3);
  lcd.print("O");
  delay(anitime);
  lcd.clear();
  lcd.setCursor(1, 3);
  lcd.print("O");
  delay(anitime);
  lcd.clear();
  lcd.setCursor(0, 3);
  lcd.print("O");
  delay(anitime);
  lcd.clear();
  lcd.setCursor(19, 3);
  lcd.print("O");
  delay(anitime);  //end of row 4

  lcd.clear();  //start of column 4
  lcd.setCursor(0, 3);
  lcd.print("O");
  delay(anitime);
  lcd.clear();
  lcd.setCursor(0, 2);
  lcd.print("O");
  delay(anitime);
  lcd.clear();
  lcd.setCursor(0, 1);
  lcd.print("O");
  delay(anitime);
  lcd.clear();
  lcd.setCursor(0, 0);
  lcd.print("O");
  delay(anitime);  //end of column 4
  lcd.clear();
}

void animation_2() {
  int anidelay = 500;
  for (int I = 0; I < 19; I++) {
    lcd.setCursor(I, 0);
    lcd.print("O");
    delay(anidelay);
    lcd.clear();
  }
  for (int I = 0; I < 3; I++) {
    lcd.setCursor(19, I);
    lcd.print("O");
    delay(anidelay);
    lcd.clear();
  }
  for (int I = 19; I > 0; I--) {
    lcd.setCursor(I, 3);
    lcd.print("O");
    delay(anidelay);
    lcd.clear();
  }
  for (int I = 3; I > 0; I--) {
    lcd.setCursor(0, I);
    lcd.print("O");
    delay(anidelay);
    lcd.clear();
  }
}

void idle() {
  analogWrite(ena, 0);
  analogWrite(enb, 0);
  digitalWrite(in1, LOW);
  digitalWrite(in2, LOW);
  digitalWrite(in3, LOW);
  digitalWrite(in4, LOW);
}
